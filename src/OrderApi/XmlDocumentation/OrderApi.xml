<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrderApi</name>
    </assembly>
    <members>
        <member name="T:OrderApi.Controllers.OrdersController">
            <summary>
            Exposes endpoints for interacting with orders in the state store.
            </summary>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.#ctor(OrderApi.Managers.IOrderManager,Microsoft.Extensions.Logging.ILogger{OrderApi.Controllers.OrdersController})">
            <summary>
            Instantiates a new instace of the orders controller class.
            </summary>
            <param name="orderManager">The order manager.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Persists a new order to the state storage.
            </summary>
            <remarks>
            As this is all part of a demo, the following will happen:
            1. The order details will be written to a "orders" bucket as a JSON payload to the redis container.
            2. A virtual actor with the order identifier as part of its name will be written to the redis container.
            </remarks>
            <param name="order">The details of the order.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CheckoutOrderAsync(System.Guid)">
            <summary>
            Begins the checkout process for an order.
            </summary>
            <remarks>
            Because an order is represented by a virtual actor, this will initiate the following changes:
            1. The order updated date time UTC field will be set with the current UTC time.
            2. The actor state for the order will be updated.
            3. A message will be published to a "events" exchange in RabbitMQ.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CompleteOrderAsync(System.Guid)">
            <summary>
            Completes an order.
            </summary>
            <remarks>
            Because an order is represented by a virtual actor, this will initiate the following changes:
            1. The order updated date time UTC field will be set with the current UTC time.
            2. The actor state for the order will be updated.
            3. A message will be published to a "checkout" exchange in RabbitMQ.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.DeactivateOrderActorAsync(System.Guid)">
            <summary>
            Forcefully deactivates the actor from state.
            This will forcefully write the actor's current state to the state store and remove the actor from memory.
            </summary>
            <remarks>
            The following steps will occur:
            1. The actor will update it's own state into that of a "deactivated" state.
            2. The actor will be removed from memory and it's state persisted to disk.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="T:OrderApi.Managers.IOrderManager">
            <summary>
            Defines a contract for managing orders.
            </summary>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Attempts to persist the order to order store.
            </summary>
            <param name="order">The order details.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CheckoutOrderAsync(System.Guid)">
            <summary>
            Begins the checkout process for order.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CompleteOrderAsync(System.Guid)">
            <summary>
            Completes an order.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.DeactivateOrderActorAsync(System.Guid)">
            <summary>
            Deactivates the order actor.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="T:OrderApi.Managers.OrderManager">
            <summary>
            Implements a contract for managing orders.
            </summary>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.#ctor(Microsoft.Extensions.Logging.ILogger{OrderApi.Managers.OrderManager},Infrastructure.GarbageCollector.IActorGarbageCollector)">
            <summary>
            Instantiates a new instance of the OrderManager class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="actorGarbageCollector">The actor garbage collector.</param>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CheckoutOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CompleteOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.DeactivateOrderActorAsync(System.Guid)">
            <inheritdoc/>
        </member>
    </members>
</doc>
