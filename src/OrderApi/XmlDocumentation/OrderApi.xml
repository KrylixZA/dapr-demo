<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrderApi</name>
    </assembly>
    <members>
        <member name="T:OrderApi.Actors.ActorConfig">
            <summary>
            Defines all the properties of Actor configuration in Dapr.
            See more at: https://docs.dapr.io/developing-applications/building-blocks/actors/howto-actors/#actor-runtime-configuration
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.ActorIdleTimeout">
            <summary>
            The timeout before deactivating an idle actor.
            Checks for timeouts occur every actorScanInterval interval.
            Default: 60 minutes
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.ActorScanInterval">
            <summary>
            The duration which specifies how often to scan for actors to deactivate idle actors.
            Actors that have been idle longer than actor_idle_timeout will be deactivated.
            Default: 30 seconds
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.DrainOngoingCallTimeout">
            <summary>
            The duration when in the process of draining rebalanced actors.
            This specifies the timeout for the current active actor method to finish.
            If there is no current actor method call, this is ignored.
            Default: 60 seconds
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.DrainRebalancedActors">
            <summary>
            If true, Dapr will wait for drainOngoingCallTimeout duration to allow a current actor call to complete before trying to deactivate an actor.
            Default: true
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.RemindersStoragePartitions">
            <summary>
            Configure the number of partitions for actor’s reminders.
            If not provided, all reminders are saved as a single record in actor’s state store.
            Default: 0
            </summary>
        </member>
        <member name="P:OrderApi.Actors.ActorConfig.ReentrancyConfig">
            <summary>
            Configure the reentrancy behavior for an actor.
            If not provided, reentrancy is disabled.
            Default: disabled
            Default: false
            </summary>
        </member>
        <member name="T:OrderApi.Actors.ActorState">
            <summary>
            Defines an enumeration of valid states an actor can be in.
            </summary>
        </member>
        <member name="F:OrderApi.Actors.ActorState.Active">
            <summary>
            The actor is currently active.
            </summary>
        </member>
        <member name="F:OrderApi.Actors.ActorState.Deactivated">
            <summary>
            The actor is deactivated.
            </summary>
        </member>
        <member name="F:OrderApi.Actors.ActorState.Reactivated">
            <summary>
            The actor has been reactivated and is now active again.
            </summary>
        </member>
        <member name="T:OrderApi.Actors.IOrderActor">
            <summary>
            Defines a contract for representing an order 
            </summary>
        </member>
        <member name="M:OrderApi.Actors.IOrderActor.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Creates an actor that represents the order.
            </summary>
            <param name="newOrder">The details of the order.</param>
        </member>
        <member name="M:OrderApi.Actors.IOrderActor.CheckoutOrderAsync">
            <summary>
            Begins the checkout process for an order.
            This will update the order state and the updated date time field.
            </summary>
        </member>
        <member name="M:OrderApi.Actors.IOrderActor.MarkOrderAsCompletedAsync">
            <summary>
            Marks the order as completed.
            This can be triggered when we payment has been completed and delivery has taken place.
            Completed orders will be written to a separate state store.
            </summary>
        </member>
        <member name="M:OrderApi.Actors.IOrderActor.DeactivateActorAsync">
            <summary>
            Deactivates the actor by writing updating its state to deactivated and writing it to state.
            </summary>
        </member>
        <member name="T:OrderApi.Actors.OrderActor">
            <summary>
            Represents an order as a virtual actor.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActor.ActorType">
            <summary>
            The actor type.
            </summary>
        </member>
        <member name="M:OrderApi.Actors.OrderActor.#ctor(Dapr.Actors.Runtime.ActorHost,Application.Repositories.IOrderStateRepository,Application.Repositories.IOrderPubSubRepository)">
            <summary>
            Initializes a new instance of the OrderActor.
            </summary>
            <param name="host">The Dapr.Actors.Runtime.ActorHost that will host this actor instance.</param>
            <param name="orderStateRepository">The order state repository.</param>
            <param name="orderPubSubRepository">The order pub/sub repository.</param>
        </member>
        <member name="M:OrderApi.Actors.OrderActor.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc />
        </member>
        <member name="M:OrderApi.Actors.OrderActor.CheckoutOrderAsync">
            <inheritdoc />
        </member>
        <member name="M:OrderApi.Actors.OrderActor.MarkOrderAsCompletedAsync">
            <inheritdoc />
        </member>
        <member name="M:OrderApi.Actors.OrderActor.DeactivateActorAsync">
            <inheritdoc />
        </member>
        <member name="T:OrderApi.Actors.OrderActorState">
            <summary>
            Represents the current state of the actor.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.ActorCreatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was created.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.ActorUpdatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was last updated.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.ActorDeactivatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was deactivated.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.ActorReactivatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was reactivated.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.CurrentActorState">
            <summary>
            Represents the current actor state.
            </summary>
        </member>
        <member name="P:OrderApi.Actors.OrderActorState.Order">
            <summary>
            The details of the order.
            </summary>
        </member>
        <member name="M:OrderApi.Actors.OrderActorState.CreateActorState(Domain.Models.Order)">
            <summary>
            Creates a new instance of the actor state from the order.
            </summary>
            <param name="order">The order.</param>
            <returns>An instance of the actor state based off the order.</returns>
        </member>
        <member name="M:OrderApi.Actors.OrderActorState.UpdateActorState(OrderApi.Actors.OrderActorState,Domain.Models.Order)">
            <summary>
            Updates the order details in the actor state, as well as the <see cref="P:OrderApi.Actors.OrderActorState.ActorUpdatedDateTimeUtc"/> field.
            </summary>
            <param name="orderActorState">The actor state.</param>
            <param name="updatedOrder">The updated order.</param>
        </member>
        <member name="M:OrderApi.Actors.OrderActorState.MarkActorStateAsDeactivated(OrderApi.Actors.OrderActorState)">
            <summary>
            Updates the order details in the actor state, as well as the <see cref="P:OrderApi.Actors.OrderActorState.ActorUpdatedDateTimeUtc"/> and <see cref="P:OrderApi.Actors.OrderActorState.ActorDeactivatedDateTimeUtc"/> fields.
            </summary>
            <param name="orderActorState">The actor state.</param>
        </member>
        <member name="T:OrderApi.Controllers.OrdersController">
            <summary>
            Exposes endpoints for interacting with orders in the state store.
            </summary>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.#ctor(OrderApi.Managers.IOrderManager,Microsoft.Extensions.Logging.ILogger{OrderApi.Controllers.OrdersController})">
            <summary>
            Instantiates a new instace of the orders controller class.
            </summary>
            <param name="orderManager">The order manager.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Persists a new order to the state storage.
            </summary>
            <remarks>
            As this is all part of a demo, the following will happen:
            1. The order details will be written to a "orders" bucket as a JSON payload to the redis container.
            2. A virtual actor with the order identifier as part of its name will be written to the redis container.
            </remarks>
            <param name="order">The details of the order.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CheckoutOrderAsync(System.Guid)">
            <summary>
            Begins the checkout process for an order.
            </summary>
            <remarks>
            Because an order is represented by a virtual actor, this will initiate the following changes:
            1. The order updated date time UTC field will be set with the current UTC time.
            2. The actor state for the order will be updated.
            3. A message will be published to a "events" exchange in RabbitMQ.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.CompleteOrderAsync(System.Guid)">
            <summary>
            Completes an order.
            </summary>
            <remarks>
            Because an order is represented by a virtual actor, this will initiate the following changes:
            1. The order updated date time UTC field will be set with the current UTC time.
            2. The actor state for the order will be updated.
            3. A message will be published to a "checkout" exchange in RabbitMQ.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="M:OrderApi.Controllers.OrdersController.DeactivateOrderActorAsync(System.Guid)">
            <summary>
            Forcefully deactivates the actor from state.
            This will forcefully write the actor's current state to the state store and remove the actor from memory.
            </summary>
            <remarks>
            The following steps will occur:
            1. The actor will update it's own state into that of a "deactivated" state.
            2. The actor will be removed from memory and it's state persisted to disk.
            </remarks>
            <param name="orderId">The order unique identifier.</param>
        </member>
        <member name="T:OrderApi.Managers.IOrderManager">
            <summary>
            Defines a contract for managing orders.
            </summary>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Attempts to persist the order to order store.
            </summary>
            <param name="order">The order details.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CheckoutOrderAsync(System.Guid)">
            <summary>
            Begins the checkout process for order.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.CompleteOrderAsync(System.Guid)">
            <summary>
            Completes an order.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="M:OrderApi.Managers.IOrderManager.DeactivateOrderActorAsync(System.Guid)">
            <summary>
            Deactivates the order actor.
            </summary>
            <param name="orderId">The order identifier.</param>
        </member>
        <member name="T:OrderApi.Managers.OrderManager">
            <summary>
            Implements a contract for managing orders.
            </summary>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.#ctor(Microsoft.Extensions.Logging.ILogger{OrderApi.Managers.OrderManager},Application.GarbageCollector.IActorGarbageCollector)">
            <summary>
            Instantiates a new instance of the OrderManager class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="actorGarbageCollector">The actor garbage collector.</param>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CheckoutOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.CompleteOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:OrderApi.Managers.OrderManager.DeactivateOrderActorAsync(System.Guid)">
            <inheritdoc/>
        </member>
    </members>
</doc>
