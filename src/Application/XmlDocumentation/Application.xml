<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Application</name>
    </assembly>
    <members>
        <member name="T:Application.Actors.IOrderActor">
            <summary>
            Defines a contract for representing an order 
            </summary>
        </member>
        <member name="M:Application.Actors.IOrderActor.CreateOrderAsync(Domain.Models.Order)">
            <summary>
            Creates an actor that represents the order.
            </summary>
            <param name="newOrder">The details of the order.</param>
        </member>
        <member name="M:Application.Actors.IOrderActor.CheckoutOrderAsync">
            <summary>
            Begins the checkout process for an order.
            This will update the order state and the updated date time field.
            </summary>
        </member>
        <member name="M:Application.Actors.IOrderActor.MarkOrderAsCompletedAsync">
            <summary>
            Marks the order as completed.
            This can be triggered when we payment has been completed and delivery has taken place.
            Completed orders will be written to a separate state store.
            </summary>
        </member>
        <member name="M:Application.Actors.IOrderActor.DeactivateActorAsync">
            <summary>
            Deactivates the actor by writing updating its state to deactivated and writing it to state.
            </summary>
        </member>
        <member name="T:Application.Helpers.IAesEncryptionHelper">
            <summary>
            Provides a contract to help with AES symmetric encryption.
            </summary>
        </member>
        <member name="M:Application.Helpers.IAesEncryptionHelper.EncryptObjectAsync``1(``0)">
            <summary>
            Uses symmetric AES encryption to encrypt an object.
            </summary>
            <param name="objectToEncrypt">The object to encrypt. This will be converted to a JSON object before encryption.</param>
            <typeparam name="T">The type of class to encrypt.</typeparam>
            <returns>The encrypted representation of the string.</returns>
        </member>
        <member name="M:Application.Helpers.IAesEncryptionHelper.DecryptToObjectAsync``1(System.String)">
            <summary>
            Uses symmetric AES encryption to decrypt a string to an object.
            </summary>
            <param name="stringToDecrypt">The string to decrypt.</param>
            <typeparam name="T">The type of class to return after decryption.</typeparam>
            <returns>If possible, the class representation of the encrypted string.</returns>
        </member>
        <member name="T:Application.Repositories.IOrderPubSubRepository">
            <summary>
            Defines a contract for interacting with order pub/sub resources.
            </summary>
        </member>
        <member name="M:Application.Repositories.IOrderPubSubRepository.PublishOrderEvent(Domain.Models.Order)">
            <summary>
            Publishes a messages to the "orders" queue with the event details for the order.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="T:Application.Repositories.IOrderStateRepository">
            <summary>
            Defines a contract for interacting with order state resources.
            </summary>
        </member>
        <member name="M:Application.Repositories.IOrderStateRepository.SaveOrderAsync(Domain.Models.Order)">
            <summary>
            Persists an order to state.
            </summary>
            <param name="order">The details of the order.</param>
        </member>
        <member name="M:Application.Repositories.IOrderStateRepository.GetOrderAsync(System.Guid)">
            <summary>
            Attemps to find the order. If nothing is found, null will be returned.
            </summary>
            <param name="orderId">The order identifier.</param>
            <returns>The order details. Null if not found.</returns>
        </member>
    </members>
</doc>
