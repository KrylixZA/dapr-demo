<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.Actors.ActorConfig">
            <summary>
            Defines all the properties of Actor configuration in Dapr.
            See more at: https://docs.dapr.io/developing-applications/building-blocks/actors/howto-actors/#actor-runtime-configuration
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ActorIdleTimeout">
            <summary>
            The timeout before deactivating an idle actor.
            Checks for timeouts occur every actorScanInterval interval.
            Default: 60 minutes
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ActorScanInterval">
            <summary>
            The duration which specifies how often to scan for actors to deactivate idle actors.
            Actors that have been idle longer than actor_idle_timeout will be deactivated.
            Default: 30 seconds
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.DrainOngoingCallTimeout">
            <summary>
            The duration when in the process of draining rebalanced actors.
            This specifies the timeout for the current active actor method to finish.
            If there is no current actor method call, this is ignored.
            Default: 60 seconds
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.DrainRebalancedActors">
            <summary>
            If true, Dapr will wait for drainOngoingCallTimeout duration to allow a current actor call to complete before trying to deactivate an actor.
            Default: true
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.RemindersStoragePartitions">
            <summary>
            Configure the number of partitions for actor’s reminders.
            If not provided, all reminders are saved as a single record in actor’s state store.
            Default: 0
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ReentrancyConfig">
            <summary>
            Configure the reentrancy behavior for an actor.
            If not provided, reentrancy is disabled.
            Default: disabled
            Default: false
            </summary>
        </member>
        <member name="T:Infrastructure.Actors.ActorState">
            <summary>
            Defines an enumeration of valid states an actor can be in.
            </summary>
        </member>
        <member name="F:Infrastructure.Actors.ActorState.Active">
            <summary>
            The actor is currently active.
            </summary>
        </member>
        <member name="F:Infrastructure.Actors.ActorState.Deactivated">
            <summary>
            The actor is deactivated.
            </summary>
        </member>
        <member name="F:Infrastructure.Actors.ActorState.Reactivated">
            <summary>
            The actor has been reactivated and is now active again.
            </summary>
        </member>
        <member name="T:Infrastructure.Actors.OrderActor">
            <summary>
            Represents an order as a virtual actor.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActor.ActorType">
            <summary>
            The actor type.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.#ctor(Dapr.Actors.Runtime.ActorHost,Application.Repositories.IOrderStateRepository,Application.Repositories.IOrderPubSubRepository)">
            <summary>
            Initializes a new instance of the OrderActor.
            </summary>
            <param name="host">The Dapr.Actors.Runtime.ActorHost that will host this actor instance.</param>
            <param name="orderStateRepository">The order state repository.</param>
            <param name="orderPubSubRepository">The order pub/sub repository.</param>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CheckoutOrderAsync">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.MarkOrderAsCompletedAsync">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.DeactivateActorAsync">
            <inheritdoc />
        </member>
        <member name="T:Infrastructure.Actors.OrderActorState">
            <summary>
            Represents the current state of the actor.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.ActorCreatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was created.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.ActorUpdatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was last updated.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.ActorDeactivatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was deactivated.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.ActorReactivatedDateTimeUtc">
            <summary>
            The UTC date and time when the actor was reactivated.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.CurrentActorState">
            <summary>
            Represents the current actor state.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActorState.Order">
            <summary>
            The details of the order.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActorState.CreateActorState(Domain.Models.Order)">
            <summary>
            Creates a new instance of the actor state from the order.
            </summary>
            <param name="order">The order.</param>
            <returns>An instance of the actor state based off the order.</returns>
        </member>
        <member name="M:Infrastructure.Actors.OrderActorState.UpdateActorState(Infrastructure.Actors.OrderActorState,Domain.Models.Order)">
            <summary>
            Updates the order details in the actor state, as well as the <see cref="P:Infrastructure.Actors.OrderActorState.ActorUpdatedDateTimeUtc"/> field.
            </summary>
            <param name="orderActorState">The actor state.</param>
            <param name="updatedOrder">The updated order.</param>
        </member>
        <member name="M:Infrastructure.Actors.OrderActorState.MarkActorStateAsDeactivated(Infrastructure.Actors.OrderActorState)">
            <summary>
            Updates the order details in the actor state, as well as the <see cref="P:Infrastructure.Actors.OrderActorState.ActorUpdatedDateTimeUtc"/> and <see cref="P:Infrastructure.Actors.OrderActorState.ActorDeactivatedDateTimeUtc"/> fields.
            </summary>
            <param name="orderActorState">The actor state.</param>
        </member>
        <member name="T:Infrastructure.GarbageCollector.ActorGarbageCollector">
            <summary>
            Implements a contract for garbage collecting actors.
            </summary>
        </member>
        <member name="M:Infrastructure.GarbageCollector.ActorGarbageCollector.#ctor(Microsoft.Extensions.Logging.ILogger{Infrastructure.GarbageCollector.ActorGarbageCollector},System.Net.Http.IHttpClientFactory)">
            <summary>
            Instantiates a new instance of the ActorGarbageCollector class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="httpClientFactory">The HTTP client factory.</param>
        </member>
        <member name="M:Infrastructure.GarbageCollector.ActorGarbageCollector.GarbageCollectActorAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.GarbageCollector.IActorGarbageCollector">
            <summary>
            Exposes a contract for garbage collecting actors.
            </summary>
        </member>
        <member name="M:Infrastructure.GarbageCollector.IActorGarbageCollector.GarbageCollectActorAsync(System.String,System.String)">
            <summary>
            Garbage collects the actor. This will forcefully deactivate the actor from working memory.
            See more here: https://docs.dapr.io/reference/api/actors_api/#deactivate-actor
            </summary>
            <param name="actorId">The actor identifer.</param>
            <param name="actorType">The actor type.</param>
        </member>
        <member name="T:Infrastructure.Helpers.AesEncryptionHelper">
            <summary>
            Implements a contract to help with AES symmetric encryption.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.#ctor">
            <summary>
            Instantiates a new instance of the AesEncryptionHelper class.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.EncryptObjectAsync``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.DecryptToObjectAsync``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Infrastructure.Repositories.OrderPubSubRepository">
            <summary>
            Implements a contract for interacting with order pub/sub resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.#ctor(Application.Helpers.IAesEncryptionHelper)">
            <summary>
            Instantiates a new instance of the order pub/sub repository class.
            </summary>
            <param name="aesEncryptionHelper">The AES encryption helper.</param>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.PublishOrderEvent(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.Repositories.OrderStateRepository">
            <summary>
            Implements a contract for interacting with order state resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.#ctor">
            <summary>
            Instantiates a new instance of the order state repository class.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.SaveOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.GetOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
    </members>
</doc>
