<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.Actors.OrderActor">
            <summary>
            Implements a contract for my test actor.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActor.ActorType">
            <summary>
            The actor type.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.#ctor(Dapr.Actors.Runtime.ActorHost,Application.Repositories.IOrderStateRepository,Application.Repositories.IOrderPubSubRepository)">
            <summary>
            Initializes a new instance of MyActor
            </summary>
            <param name="host">The Dapr.Actors.Runtime.ActorHost that will host this actor instance.</param>
            <param name="orderStateRepository">The order state repository.</param>
            <param name="orderPubSubRepository">The order pub/sub repository.</param>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CheckoutOrderAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnActivateAsync">
            <summary>
            This method is called whenever an actor is activated.
            An actor is activated the first time any of its methods are invoked.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnDeactivateAsync">
            <summary>
            This method is called whenever an actor is deactivated after a period of inactivity.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.RegisterReminder">
            <summary>
            Register MyReminder reminder with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.UnregisterReminder">
            <summary>
            Unregister MyReminder reminder with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)">
            <summary>
            Implement IRemindeable.ReceiveReminderAsync() which is call back invoked when an actor reminder is triggered.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.RegisterTimer">
            <summary>
            Register MyTimer timer with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.UnregisterTimer">
            <summary>
            Unregister MyTimer timer with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnTimerCallBack(System.Byte[])">
            <summary>
            Timer callback once timer is expired
            </summary>
        </member>
        <member name="T:Infrastructure.Helpers.AesEncryptionHelper">
            <summary>
            Implements a contract to help with AES symmetric encryption.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.#ctor">
            <summary>
            Instantiates a new instance of the AesEncryptionHelper class.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.EncryptStringAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Infrastructure.Managers.OrderManager">
            <summary>
            Implements a contract for managing orders.
            </summary>
        </member>
        <member name="M:Infrastructure.Managers.OrderManager.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Managers.OrderManager.CheckoutOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.Repositories.OrderPubSubRepository">
            <summary>
            Implements a contract for interacting with order pub/sub resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.#ctor(Application.Helpers.IAesEncryptionHelper)">
            <summary>
            Instantiates a new instance of the order pub/sub repository class.
            </summary>
            <param name="aesEncryptionHelper">The AES encryption helper.</param>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.PublishOrderForCheckoutAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.Repositories.OrderStateRepository">
            <summary>
            Implements a contract for interacting with order state resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.#ctor">
            <summary>
            Instantiates a new instance of the order state repository class.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.GetOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.CheckoutOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
    </members>
</doc>
