<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.Actors.ActorConfig">
            <summary>
            Defines all the properties of Actor configuration in Dapr.
            See more at: https://docs.dapr.io/developing-applications/building-blocks/actors/howto-actors/#actor-runtime-configuration
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ActorIdleTimeout">
            <summary>
            The timeout before deactivating an idle actor.
            Checks for timeouts occur every actorScanInterval interval.
            Default: 60 minutes
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ActorScanInterval">
            <summary>
            The duration which specifies how often to scan for actors to deactivate idle actors.
            Actors that have been idle longer than actor_idle_timeout will be deactivated.
            Default: 30 seconds
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.DrainOngoingCallTimeout">
            <summary>
            The duration when in the process of draining rebalanced actors.
            This specifies the timeout for the current active actor method to finish.
            If there is no current actor method call, this is ignored.
            Default: 60 seconds
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.DrainRebalancedActors">
            <summary>
            If true, Dapr will wait for drainOngoingCallTimeout duration to allow a current actor call to complete before trying to deactivate an actor.
            Default: true
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.RemindersStoragePartitions">
            <summary>
            Configure the number of partitions for actor’s reminders.
            If not provided, all reminders are saved as a single record in actor’s state store.
            Default: 0
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.ActorConfig.ReentrancyConfig">
            <summary>
            Configure the reentrancy behavior for an actor.
            If not provided, reentrancy is disabled.
            Default: disabled
            Default: false
            </summary>
        </member>
        <member name="T:Infrastructure.Actors.OrderActor">
            <summary>
            Implements a contract for my test actor.
            </summary>
        </member>
        <member name="P:Infrastructure.Actors.OrderActor.ActorType">
            <summary>
            The actor type.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.#ctor(Dapr.Actors.Runtime.ActorHost,Application.Repositories.IOrderStateRepository,Application.Repositories.IOrderPubSubRepository)">
            <summary>
            Initializes a new instance of MyActor
            </summary>
            <param name="host">The Dapr.Actors.Runtime.ActorHost that will host this actor instance.</param>
            <param name="orderStateRepository">The order state repository.</param>
            <param name="orderPubSubRepository">The order pub/sub repository.</param>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.CheckoutOrderAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnActivateAsync">
            <summary>
            This method is called whenever an actor is activated.
            An actor is activated the first time any of its methods are invoked.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnDeactivateAsync">
            <summary>
            This method is called whenever an actor is deactivated after a period of inactivity.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.RegisterReminder">
            <summary>
            Register MyReminder reminder with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.UnregisterReminder">
            <summary>
            Unregister MyReminder reminder with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)">
            <summary>
            Implement IRemindeable.ReceiveReminderAsync() which is call back invoked when an actor reminder is triggered.
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.RegisterTimer">
            <summary>
            Register MyTimer timer with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.UnregisterTimer">
            <summary>
            Unregister MyTimer timer with the actor
            </summary>
        </member>
        <member name="M:Infrastructure.Actors.OrderActor.OnTimerCallBack(System.Byte[])">
            <summary>
            Timer callback once timer is expired
            </summary>
        </member>
        <member name="T:Infrastructure.Helpers.AesEncryptionHelper">
            <summary>
            Implements a contract to help with AES symmetric encryption.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.#ctor">
            <summary>
            Instantiates a new instance of the AesEncryptionHelper class.
            </summary>
        </member>
        <member name="M:Infrastructure.Helpers.AesEncryptionHelper.EncryptStringAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Infrastructure.Managers.OrderManager">
            <summary>
            Implements a contract for managing orders.
            </summary>
        </member>
        <member name="M:Infrastructure.Managers.OrderManager.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Managers.OrderManager.CheckoutOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.Repositories.OrderPubSubRepository">
            <summary>
            Implements a contract for interacting with order pub/sub resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.#ctor(Application.Helpers.IAesEncryptionHelper)">
            <summary>
            Instantiates a new instance of the order pub/sub repository class.
            </summary>
            <param name="aesEncryptionHelper">The AES encryption helper.</param>
        </member>
        <member name="M:Infrastructure.Repositories.OrderPubSubRepository.PublishOrderForCheckoutAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="T:Infrastructure.Repositories.OrderStateRepository">
            <summary>
            Implements a contract for interacting with order state resources.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.#ctor">
            <summary>
            Instantiates a new instance of the order state repository class.
            </summary>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.CreateOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.GetOrderAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Repositories.OrderStateRepository.CheckoutOrderAsync(Domain.Models.Order)">
            <inheritdoc/>
        </member>
    </members>
</doc>
